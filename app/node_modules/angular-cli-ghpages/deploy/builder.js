"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const architect_1 = require("@angular-devkit/architect");
const core_1 = require("@angular-devkit/core");
const node_1 = require("@angular-devkit/core/node");
const os_1 = __importDefault(require("os"));
const path = __importStar(require("path"));
const engine = __importStar(require("../engine/engine"));
const actions_1 = __importDefault(require("./actions"));
exports.default = architect_1.createBuilder((options, context) => __awaiter(this, void 0, void 0, function* () {
    try {
        const root = core_1.normalize(context.workspaceRoot);
        const workspace = new core_1.experimental.workspace.Workspace(root, new node_1.NodeJsSyncHost());
        yield workspace
            .loadWorkspaceFromHost(core_1.normalize('angular.json'))
            .toPromise();
        if (!context.target) {
            throw new Error('Cannot deploy the application without a target');
        }
        const targets = workspace.getProjectTargets(context.target.project);
        if (!targets ||
            !targets.build ||
            !targets.build.options ||
            !targets.build.options.outputPath) {
            throw new Error('Cannot find the project output directory');
        }
        const isWin = os_1.default.platform() === 'win32';
        const workspaceRoot = !isWin
            ? workspace.root
            : core_1.asWindowsPath(workspace.root);
        yield actions_1.default(engine, context, path.join(workspaceRoot, targets.build.options.outputPath), options);
    }
    catch (e) {
        context.logger.error('‚ùå An error occurred when trying to deploy:');
        context.logger.error(e.message);
        return { success: false };
    }
    return { success: true };
}));
//# sourceMappingURL=builder.js.map