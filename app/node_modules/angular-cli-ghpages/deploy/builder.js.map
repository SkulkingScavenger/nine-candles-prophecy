{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../deploy/builder.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,yDAImC;AACnC,+CAA8E;AAC9E,oDAA2D;AAC3D,4CAAoB;AACpB,2CAA6B;AAE7B,yDAA2C;AAC3C,wDAA+B;AAK/B,kBAAe,yBAAa,CAC1B,CAAO,OAAe,EAAE,OAAuB,EAA0B,EAAE;IACzE,IAAI;QAEF,MAAM,IAAI,GAAG,gBAAS,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAC9C,MAAM,SAAS,GAAG,IAAI,mBAAY,CAAC,SAAS,CAAC,SAAS,CACpD,IAAI,EACJ,IAAI,qBAAc,EAAE,CACrB,CAAC;QACF,MAAM,SAAS;aACZ,qBAAqB,CAAC,gBAAS,CAAC,cAAc,CAAC,CAAC;aAChD,SAAS,EAAE,CAAC;QAEf,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;SACnE;QAED,MAAM,OAAO,GAAG,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAEpE,IACE,CAAC,OAAO;YACR,CAAC,OAAO,CAAC,KAAK;YACd,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO;YACtB,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,EACjC;YACA,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;SAC7D;QAED,MAAM,KAAK,GAAG,YAAE,CAAC,QAAQ,EAAE,KAAK,OAAO,CAAC;QACxC,MAAM,aAAa,GAAG,CAAC,KAAK;YAC1B,CAAC,CAAC,SAAS,CAAC,IAAI;YAChB,CAAC,CAAC,oBAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAElC,MAAM,iBAAM,CACV,MAAM,EACN,OAAO,EACP,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAC1D,OAAO,CACR,CAAC;KACH;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;QACnE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAChC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;KAC3B;IAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAC3B,CAAC,CAAA,CACF,CAAC","sourcesContent":["import {\n  BuilderContext,\n  BuilderOutput,\n  createBuilder\n} from '@angular-devkit/architect';\nimport { asWindowsPath, experimental, normalize } from '@angular-devkit/core';\nimport { NodeJsSyncHost } from '@angular-devkit/core/node';\nimport os from 'os';\nimport * as path from 'path';\n\nimport * as engine from '../engine/engine';\nimport deploy from './actions';\nimport { Schema } from './schema';\n\n// Call the createBuilder() function to create a builder. This mirrors\n// createJobHandler() but add typings specific to Architect Builders.\nexport default createBuilder<any>(\n  async (options: Schema, context: BuilderContext): Promise<BuilderOutput> => {\n    try {\n      // The project root is added to a BuilderContext.\n      const root = normalize(context.workspaceRoot);\n      const workspace = new experimental.workspace.Workspace(\n        root,\n        new NodeJsSyncHost()\n      );\n      await workspace\n        .loadWorkspaceFromHost(normalize('angular.json'))\n        .toPromise();\n\n      if (!context.target) {\n        throw new Error('Cannot deploy the application without a target');\n      }\n\n      const targets = workspace.getProjectTargets(context.target.project);\n\n      if (\n        !targets ||\n        !targets.build ||\n        !targets.build.options ||\n        !targets.build.options.outputPath\n      ) {\n        throw new Error('Cannot find the project output directory');\n      }\n\n      const isWin = os.platform() === 'win32';\n      const workspaceRoot = !isWin\n        ? workspace.root\n        : asWindowsPath(workspace.root);\n\n      await deploy(\n        engine,\n        context,\n        path.join(workspaceRoot, targets.build.options.outputPath),\n        options\n      );\n    } catch (e) {\n      context.logger.error('‚ùå An error occurred when trying to deploy:');\n      context.logger.error(e.message);\n      return { success: false };\n    }\n\n    return { success: true };\n  }\n);\n"]}